name: Publish to PyPI using uv

on:
  push:
    tags:
      - '*'  # 모든 태그 push 시 작동

permissions:
  contents: write  # 역할 뭐지?
  id-token: write
  attestations: write
  actions: read  # ✅ 요 줄 추가


jobs:
  oidc_debug_test:
    runs-on: ubuntu-latest
    name: A test of the oidc debugger
    steps:
      - name: Debug OIDC Claims
        uses: github/actions-oidc-debugger@main
        with:
          audience: '${{ github.server_url }}/${{ github.repository_owner }}'

  uv-build-cosign:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v5

      - name: build pkg
        run: |
          uv build

      # Generate hashes used for provenance.
      - name: generate hash
        id: hash
        run: cd dist && echo "hash=$(sha256sum * | base64 -w0)" >> $GITHUB_OUTPUT
      - uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          path: ./dist

#      - name: Sign the dists with Sigstore
#        uses: sigstore/gh-action-sigstore-python@v3.0.0
#        with:
#          inputs: >-
#            ./dist/*.tar.gz
#            ./dist/*.whl
#          release-signing-artifacts: true
#
#      - name: Generate artifact attestation
#        uses: actions/attest-build-provenance@v2
#        with:
#          subject-path: "dist/*"

  provenance:
    needs: [uv-build-cosign]
    permissions:
      actions: read
      id-token: write
      contents: write
    # Can't pin with hash due to how this workflow works.
    uses: slsa-framework/slsa-github-generator/.github/workflows/generator_generic_slsa3.yml@v2.1.0
    with:
      upload-assets: true
      upload-tag-name: ${{ github.ref_name }}
      base64-subjects: ${{ needs.build.outputs.hash }}

  create-release:
    # Upload the sdist, wheels, and provenance to a GitHub release. They remain
    # available as build artifacts for a while as well.
    needs: [provenance]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/download-artifact@95815c38cf2ff2164869cbab79da8d1f422bc89e # v4.2.1
      - name: create release
        run: >
          gh release create --draft --repo ${{ github.repository }}
          ${{ github.ref_name }}
          *.intoto.jsonl/* artifact/*
        env:
          GH_TOKEN: ${{ github.token }}

  publish-release:
    needs: [create-release]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Create GitHub Release
        run: |
          gh release create --draft --repo ${{ github.repository }} \
            ${{ github.ref_name }} dist/*
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Publish to PyPI with uv
        run: |
          uv publish
