name: Publish to PyPI using uv

on:
  push:
    tags:
      - '*'  # 모든 태그 push 시 작동

permissions:
  contents: write  # 역할 뭐지?
  id-token: write
  attestations: write
  actions: read  # ✅ 요 줄 추가


jobs:
  oidc_debug_test:
    runs-on: ubuntu-latest
    name: A test of the oidc debugger
    steps:
      - name: Debug OIDC Claims
        uses: github/actions-oidc-debugger@main
        with:
          audience: '${{ github.server_url }}/${{ github.repository_owner }}'

  uv-build-cosign:
    runs-on: ubuntu-latest

    outputs:
      hash: ${{ steps.hash.outputs.hash }}
      base64_subjects: ${{ steps.encode.outputs.subjects }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v5

      - name: build pkg
        run: |
          uv build

      - name: generate hash
        id: hash
        run: |
          FILE=$(ls dist/*.whl)
          HASH=$(sha256sum "$FILE" | cut -d' ' -f1 | base64 -w0)
          echo "hash=$HASH" >> "$GITHUB_OUTPUT"
        env:
          UV_CACHE_DIR: ${{ runner.temp }}/setup-uv-cache

      - name: Hash artifacts
        id: encode
        run: |
          sha256sum dist/* > subjects.txt
          echo "subjects=$(base64 -w 0 subjects.txt)" >> "$GITHUB_OUTPUT"
      

      - name: Debug Outputs
        run: |
          echo "Hash output: ${{ steps.hash.outputs.hash }}"
          echo "base64_subjects: ${{ steps.encode.outputs.subjects }}"

  provenance:
    needs: [uv-build-cosign]
    permissions:
      actions: read
      id-token: write
      contents: write
    # Can't pin with hash due to how this workflow works.
    uses: slsa-framework/slsa-github-generator/.github/workflows/generator_generic_slsa3.yml@v2.1.0
    with:
      base64-subjects: ${{ needs.uv-build-cosign.outputs.base64_subjects }}
      provenance-name: provenance-${{ github.ref_name }}.intoto.jsonl
      upload-assets: true
      upload-tag-name: ${{ github.ref_name }}
#      continue-on-error: true   # ✅ 이 줄 추가


  create-release:
    # Upload the sdist, wheels, and provenance to a GitHub release. They remain
    # available as build artifacts for a while as well.
    needs: [provenance]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/download-artifact@95815c38cf2ff2164869cbab79da8d1f422bc89e # v4.2.1
        with:
          name: dist   # ← upload 시 default 이름은 디렉토리명(dist)임
          path: ./dist
      - name: create release
        run: >
          gh release create --draft --repo ${{ github.repository }}
          ${{ github.ref_name }}
          *.intoto.jsonl/* dist/*
        env:
          GH_TOKEN: ${{ github.token }}

  publish-release:
    needs: [create-release]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Create GitHub Release
        run: |
          gh release create --draft --repo ${{ github.repository }} \
            ${{ github.ref_name }} dist/*
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Publish to PyPI with uv
        run: |
          uv publish
